/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../client.ts'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../client.ts'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  RecentRedemptionsQueryResponse,
  RecentRedemptions400,
  RecentRedemptions401,
  RecentRedemptions403,
  RecentRedemptions404,
  RecentRedemptions409,
  RecentRedemptions417,
  RecentRedemptions500,
  RecentRedemptions501,
} from '../models/RecentRedemptions.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'
import { recentRedemptions } from '../recentRedemptions.ts'

export const recentRedemptionsQueryKey = () => [{ url: '/api/v1/coupons/recent-redemptions' }] as const

export type RecentRedemptionsQueryKey = ReturnType<typeof recentRedemptionsQueryKey>

export function recentRedemptionsQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = recentRedemptionsQueryKey()
  return queryOptions<
    ResponseConfig<RecentRedemptionsQueryResponse>,
    ResponseErrorConfig<
      | RecentRedemptions400
      | RecentRedemptions401
      | RecentRedemptions403
      | RecentRedemptions404
      | RecentRedemptions409
      | RecentRedemptions417
      | RecentRedemptions500
      | RecentRedemptions501
    >,
    ResponseConfig<RecentRedemptionsQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return recentRedemptions(config)
    },
  })
}

/**
 * @description Lista os Ãºltimos resgates feitos.
 * @summary Resgates Recentes
 * {@link /api/v1/coupons/recent-redemptions}
 */
export function useRecentRedemptions<
  TData = ResponseConfig<RecentRedemptionsQueryResponse>,
  TQueryData = ResponseConfig<RecentRedemptionsQueryResponse>,
  TQueryKey extends QueryKey = RecentRedemptionsQueryKey,
>(
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<RecentRedemptionsQueryResponse>,
        ResponseErrorConfig<
          | RecentRedemptions400
          | RecentRedemptions401
          | RecentRedemptions403
          | RecentRedemptions404
          | RecentRedemptions409
          | RecentRedemptions417
          | RecentRedemptions500
          | RecentRedemptions501
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? recentRedemptionsQueryKey()

  const query = useQuery(
    {
      ...recentRedemptionsQueryOptions(config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<
      | RecentRedemptions400
      | RecentRedemptions401
      | RecentRedemptions403
      | RecentRedemptions404
      | RecentRedemptions409
      | RecentRedemptions417
      | RecentRedemptions500
      | RecentRedemptions501
    >
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}