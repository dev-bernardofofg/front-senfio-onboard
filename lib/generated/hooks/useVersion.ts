/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../client.ts'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../client.ts'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type { VersionQueryResponse, Version400, Version401, Version403, Version404, Version409, Version417, Version500, Version501 } from '../models/Version.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'
import { version } from '../version.ts'

export const versionQueryKey = () => [{ url: '/version' }] as const

export type VersionQueryKey = ReturnType<typeof versionQueryKey>

export function versionQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = versionQueryKey()
  return queryOptions<
    ResponseConfig<VersionQueryResponse>,
    ResponseErrorConfig<Version400 | Version401 | Version403 | Version404 | Version409 | Version417 | Version500 | Version501>,
    ResponseConfig<VersionQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return version(config)
    },
  })
}

/**
 * @description Get the version of the application.
 * @summary Version
 * {@link /version}
 */
export function useVersion<
  TData = ResponseConfig<VersionQueryResponse>,
  TQueryData = ResponseConfig<VersionQueryResponse>,
  TQueryKey extends QueryKey = VersionQueryKey,
>(
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<VersionQueryResponse>,
        ResponseErrorConfig<Version400 | Version401 | Version403 | Version404 | Version409 | Version417 | Version500 | Version501>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? versionQueryKey()

  const query = useQuery(
    {
      ...versionQueryOptions(config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Version400 | Version401 | Version403 | Version404 | Version409 | Version417 | Version500 | Version501>> & {
    queryKey: TQueryKey
  }

  query.queryKey = queryKey as TQueryKey

  return query
}