/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../client.ts'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../client.ts'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  HealthCheckQueryResponse,
  HealthCheck400,
  HealthCheck401,
  HealthCheck403,
  HealthCheck404,
  HealthCheck409,
  HealthCheck417,
  HealthCheck500,
  HealthCheck501,
} from '../models/HealthCheck.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'
import { healthCheck } from '../healthCheck.ts'

export const healthCheckQueryKey = () => [{ url: '/health' }] as const

export type HealthCheckQueryKey = ReturnType<typeof healthCheckQueryKey>

export function healthCheckQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = healthCheckQueryKey()
  return queryOptions<
    ResponseConfig<HealthCheckQueryResponse>,
    ResponseErrorConfig<HealthCheck400 | HealthCheck401 | HealthCheck403 | HealthCheck404 | HealthCheck409 | HealthCheck417 | HealthCheck500 | HealthCheck501>,
    ResponseConfig<HealthCheckQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return healthCheck(config)
    },
  })
}

/**
 * @description Check the health of the application.
 * @summary Health Check
 * {@link /health}
 */
export function useHealthCheck<
  TData = ResponseConfig<HealthCheckQueryResponse>,
  TQueryData = ResponseConfig<HealthCheckQueryResponse>,
  TQueryKey extends QueryKey = HealthCheckQueryKey,
>(
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<HealthCheckQueryResponse>,
        ResponseErrorConfig<
          HealthCheck400 | HealthCheck401 | HealthCheck403 | HealthCheck404 | HealthCheck409 | HealthCheck417 | HealthCheck500 | HealthCheck501
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? healthCheckQueryKey()

  const query = useQuery(
    {
      ...healthCheckQueryOptions(config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<HealthCheck400 | HealthCheck401 | HealthCheck403 | HealthCheck404 | HealthCheck409 | HealthCheck417 | HealthCheck500 | HealthCheck501>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}