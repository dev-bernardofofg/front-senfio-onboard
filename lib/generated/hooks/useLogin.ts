/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../client.ts'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../client.ts'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  LoginMutationRequest,
  LoginMutationResponse,
  Login400,
  Login401,
  Login403,
  Login404,
  Login409,
  Login417,
  Login500,
  Login501,
} from '../models/Login.ts'
import { useMutation } from '@tanstack/react-query'
import { login } from '../login.ts'

export const loginMutationKey = () => [{ url: '/api/v1/authentication/login' }] as const

export type LoginMutationKey = ReturnType<typeof loginMutationKey>

/**
 * @description Loga o usu√°rio no sistema.
 * @summary Login
 * {@link /api/v1/authentication/login}
 */
export function useLogin<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<LoginMutationResponse>,
      ResponseErrorConfig<Login400 | Login401 | Login403 | Login404 | Login409 | Login417 | Login500 | Login501>,
      { data: LoginMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<LoginMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? loginMutationKey()

  return useMutation<
    ResponseConfig<LoginMutationResponse>,
    ResponseErrorConfig<Login400 | Login401 | Login403 | Login404 | Login409 | Login417 | Login500 | Login501>,
    { data: LoginMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return login(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}