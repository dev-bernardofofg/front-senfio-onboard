/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../client.ts'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../client.ts'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  GetChangelogQueryResponse,
  GetChangelog400,
  GetChangelog401,
  GetChangelog403,
  GetChangelog404,
  GetChangelog409,
  GetChangelog417,
  GetChangelog500,
  GetChangelog501,
} from '../models/GetChangelog.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'
import { getChangelog } from '../getChangelog.ts'

export const getChangelogQueryKey = () => [{ url: '/api/v1/changelog' }] as const

export type GetChangelogQueryKey = ReturnType<typeof getChangelogQueryKey>

export function getChangelogQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getChangelogQueryKey()
  return queryOptions<
    ResponseConfig<GetChangelogQueryResponse>,
    ResponseErrorConfig<
      GetChangelog400 | GetChangelog401 | GetChangelog403 | GetChangelog404 | GetChangelog409 | GetChangelog417 | GetChangelog500 | GetChangelog501
    >,
    ResponseConfig<GetChangelogQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getChangelog(config)
    },
  })
}

/**
 * @description Recupera o changelog do projeto.
 * @summary Changelog
 * {@link /api/v1/changelog}
 */
export function useGetChangelog<
  TData = ResponseConfig<GetChangelogQueryResponse>,
  TQueryData = ResponseConfig<GetChangelogQueryResponse>,
  TQueryKey extends QueryKey = GetChangelogQueryKey,
>(
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<GetChangelogQueryResponse>,
        ResponseErrorConfig<
          GetChangelog400 | GetChangelog401 | GetChangelog403 | GetChangelog404 | GetChangelog409 | GetChangelog417 | GetChangelog500 | GetChangelog501
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getChangelogQueryKey()

  const query = useQuery(
    {
      ...getChangelogQueryOptions(config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<
      GetChangelog400 | GetChangelog401 | GetChangelog403 | GetChangelog404 | GetChangelog409 | GetChangelog417 | GetChangelog500 | GetChangelog501
    >
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}