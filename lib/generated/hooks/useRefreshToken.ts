/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../client.ts'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../client.ts'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  RefreshTokenMutationRequest,
  RefreshTokenMutationResponse,
  RefreshToken400,
  RefreshToken401,
  RefreshToken403,
  RefreshToken404,
  RefreshToken409,
  RefreshToken417,
  RefreshToken500,
  RefreshToken501,
} from '../models/RefreshToken.ts'
import { useMutation } from '@tanstack/react-query'
import { refreshToken } from '../refreshToken.ts'

export const refreshTokenMutationKey = () => [{ url: '/api/v1/authentication/refresh' }] as const

export type RefreshTokenMutationKey = ReturnType<typeof refreshTokenMutationKey>

/**
 * @description Atualiza o token de acesso.
 * @summary Atualizar token
 * {@link /api/v1/authentication/refresh}
 */
export function useRefreshToken<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<RefreshTokenMutationResponse>,
      ResponseErrorConfig<
        RefreshToken400 | RefreshToken401 | RefreshToken403 | RefreshToken404 | RefreshToken409 | RefreshToken417 | RefreshToken500 | RefreshToken501
      >,
      { data: RefreshTokenMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<RefreshTokenMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? refreshTokenMutationKey()

  return useMutation<
    ResponseConfig<RefreshTokenMutationResponse>,
    ResponseErrorConfig<
      RefreshToken400 | RefreshToken401 | RefreshToken403 | RefreshToken404 | RefreshToken409 | RefreshToken417 | RefreshToken500 | RefreshToken501
    >,
    { data: RefreshTokenMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return refreshToken(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}