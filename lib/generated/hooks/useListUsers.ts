/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../client.ts'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../client.ts'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  ListUsersQueryResponse,
  ListUsersQueryParams,
  ListUsers400,
  ListUsers401,
  ListUsers403,
  ListUsers404,
  ListUsers409,
  ListUsers417,
  ListUsers500,
  ListUsers501,
} from '../models/ListUsers.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'
import { listUsers } from '../listUsers.ts'

export const listUsersQueryKey = (params?: ListUsersQueryParams) => [{ url: '/api/v1/authentication/users' }, ...(params ? [params] : [])] as const

export type ListUsersQueryKey = ReturnType<typeof listUsersQueryKey>

export function listUsersQueryOptions(params?: ListUsersQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = listUsersQueryKey(params)
  return queryOptions<
    ResponseConfig<ListUsersQueryResponse>,
    ResponseErrorConfig<ListUsers400 | ListUsers401 | ListUsers403 | ListUsers404 | ListUsers409 | ListUsers417 | ListUsers500 | ListUsers501>,
    ResponseConfig<ListUsersQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return listUsers(params, config)
    },
  })
}

/**
 * @description Lista todos os usuários do sistema.
 * @summary Listar usuários
 * {@link /api/v1/authentication/users}
 */
export function useListUsers<
  TData = ResponseConfig<ListUsersQueryResponse>,
  TQueryData = ResponseConfig<ListUsersQueryResponse>,
  TQueryKey extends QueryKey = ListUsersQueryKey,
>(
  params?: ListUsersQueryParams,
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<ListUsersQueryResponse>,
        ResponseErrorConfig<ListUsers400 | ListUsers401 | ListUsers403 | ListUsers404 | ListUsers409 | ListUsers417 | ListUsers500 | ListUsers501>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? listUsersQueryKey(params)

  const query = useQuery(
    {
      ...listUsersQueryOptions(params, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<ListUsers400 | ListUsers401 | ListUsers403 | ListUsers404 | ListUsers409 | ListUsers417 | ListUsers500 | ListUsers501>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}