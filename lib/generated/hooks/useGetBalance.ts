/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../client.ts'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../client.ts'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  GetBalanceQueryResponse,
  GetBalance400,
  GetBalance401,
  GetBalance403,
  GetBalance404,
  GetBalance409,
  GetBalance417,
  GetBalance500,
  GetBalance501,
} from '../models/GetBalance.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'
import { getBalance } from '../getBalance.ts'

export const getBalanceQueryKey = () => [{ url: '/api/v1/coupons/balance' }] as const

export type GetBalanceQueryKey = ReturnType<typeof getBalanceQueryKey>

export function getBalanceQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getBalanceQueryKey()
  return queryOptions<
    ResponseConfig<GetBalanceQueryResponse>,
    ResponseErrorConfig<GetBalance400 | GetBalance401 | GetBalance403 | GetBalance404 | GetBalance409 | GetBalance417 | GetBalance500 | GetBalance501>,
    ResponseConfig<GetBalanceQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getBalance(config)
    },
  })
}

/**
 * @description Obtém o saldo de cupons disponíveis para o usuário autenticado.
 * @summary Saldo de Cupons
 * {@link /api/v1/coupons/balance}
 */
export function useGetBalance<
  TData = ResponseConfig<GetBalanceQueryResponse>,
  TQueryData = ResponseConfig<GetBalanceQueryResponse>,
  TQueryKey extends QueryKey = GetBalanceQueryKey,
>(
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<GetBalanceQueryResponse>,
        ResponseErrorConfig<GetBalance400 | GetBalance401 | GetBalance403 | GetBalance404 | GetBalance409 | GetBalance417 | GetBalance500 | GetBalance501>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getBalanceQueryKey()

  const query = useQuery(
    {
      ...getBalanceQueryOptions(config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<GetBalance400 | GetBalance401 | GetBalance403 | GetBalance404 | GetBalance409 | GetBalance417 | GetBalance500 | GetBalance501>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}