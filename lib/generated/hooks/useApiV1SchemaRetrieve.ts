/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../client.ts'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../client.ts'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type { ApiV1SchemaRetrieveQueryResponse, ApiV1SchemaRetrieveQueryParams } from '../models/ApiV1SchemaRetrieve.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'
import { apiV1SchemaRetrieve } from '../apiV1SchemaRetrieve.ts'

export const apiV1SchemaRetrieveQueryKey = (params?: ApiV1SchemaRetrieveQueryParams) => [{ url: '/api/v1/schema' }, ...(params ? [params] : [])] as const

export type ApiV1SchemaRetrieveQueryKey = ReturnType<typeof apiV1SchemaRetrieveQueryKey>

export function apiV1SchemaRetrieveQueryOptions(params?: ApiV1SchemaRetrieveQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = apiV1SchemaRetrieveQueryKey(params)
  return queryOptions<
    ResponseConfig<ApiV1SchemaRetrieveQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<ApiV1SchemaRetrieveQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return apiV1SchemaRetrieve(params, config)
    },
  })
}

/**
 * @description OpenApi3 schema for this API. Format can be selected via content negotiation.- YAML: application/vnd.oai.openapi- JSON: application/vnd.oai.openapi+json
 * {@link /api/v1/schema}
 */
export function useApiV1SchemaRetrieve<
  TData = ResponseConfig<ApiV1SchemaRetrieveQueryResponse>,
  TQueryData = ResponseConfig<ApiV1SchemaRetrieveQueryResponse>,
  TQueryKey extends QueryKey = ApiV1SchemaRetrieveQueryKey,
>(
  params?: ApiV1SchemaRetrieveQueryParams,
  options: {
    query?: Partial<QueryObserverOptions<ResponseConfig<ApiV1SchemaRetrieveQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? apiV1SchemaRetrieveQueryKey(params)

  const query = useQuery(
    {
      ...apiV1SchemaRetrieveQueryOptions(params, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}