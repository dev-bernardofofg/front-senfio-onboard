/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../client.ts'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../client.ts'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  ListRedemptionsQueryResponse,
  ListRedemptionsQueryParams,
  ListRedemptions400,
  ListRedemptions401,
  ListRedemptions403,
  ListRedemptions404,
  ListRedemptions409,
  ListRedemptions417,
  ListRedemptions500,
  ListRedemptions501,
} from '../models/ListRedemptions.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'
import { listRedemptions } from '../listRedemptions.ts'

export const listRedemptionsQueryKey = (params?: ListRedemptionsQueryParams) => [{ url: '/api/v1/coupons/redemptions' }, ...(params ? [params] : [])] as const

export type ListRedemptionsQueryKey = ReturnType<typeof listRedemptionsQueryKey>

export function listRedemptionsQueryOptions(params?: ListRedemptionsQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = listRedemptionsQueryKey(params)
  return queryOptions<
    ResponseConfig<ListRedemptionsQueryResponse>,
    ResponseErrorConfig<
      | ListRedemptions400
      | ListRedemptions401
      | ListRedemptions403
      | ListRedemptions404
      | ListRedemptions409
      | ListRedemptions417
      | ListRedemptions500
      | ListRedemptions501
    >,
    ResponseConfig<ListRedemptionsQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return listRedemptions(params, config)
    },
  })
}

/**
 * @description Lista todos os resgates feitos pelo usu√°rio autenticado.
 * @summary Listar Resgates
 * {@link /api/v1/coupons/redemptions}
 */
export function useListRedemptions<
  TData = ResponseConfig<ListRedemptionsQueryResponse>,
  TQueryData = ResponseConfig<ListRedemptionsQueryResponse>,
  TQueryKey extends QueryKey = ListRedemptionsQueryKey,
>(
  params?: ListRedemptionsQueryParams,
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<ListRedemptionsQueryResponse>,
        ResponseErrorConfig<
          | ListRedemptions400
          | ListRedemptions401
          | ListRedemptions403
          | ListRedemptions404
          | ListRedemptions409
          | ListRedemptions417
          | ListRedemptions500
          | ListRedemptions501
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? listRedemptionsQueryKey(params)

  const query = useQuery(
    {
      ...listRedemptionsQueryOptions(params, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<
      | ListRedemptions400
      | ListRedemptions401
      | ListRedemptions403
      | ListRedemptions404
      | ListRedemptions409
      | ListRedemptions417
      | ListRedemptions500
      | ListRedemptions501
    >
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}