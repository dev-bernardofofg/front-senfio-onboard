/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../client.ts'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../client.ts'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  UpdateCouponMutationRequest,
  UpdateCouponMutationResponse,
  UpdateCouponPathParams,
  UpdateCoupon400,
  UpdateCoupon401,
  UpdateCoupon403,
  UpdateCoupon404,
  UpdateCoupon409,
  UpdateCoupon417,
  UpdateCoupon500,
  UpdateCoupon501,
} from '../models/UpdateCoupon.ts'
import { useMutation } from '@tanstack/react-query'
import { updateCoupon } from '../updateCoupon.ts'

export const updateCouponMutationKey = () => [{ url: '/api/v1/coupons/{id}' }] as const

export type UpdateCouponMutationKey = ReturnType<typeof updateCouponMutationKey>

/**
 * @description Atualiza os detalhes de um cupom existente.
 * @summary Atualizar Cupom
 * {@link /api/v1/coupons/:id}
 */
export function useUpdateCoupon<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<UpdateCouponMutationResponse>,
      ResponseErrorConfig<
        UpdateCoupon400 | UpdateCoupon401 | UpdateCoupon403 | UpdateCoupon404 | UpdateCoupon409 | UpdateCoupon417 | UpdateCoupon500 | UpdateCoupon501
      >,
      { id: UpdateCouponPathParams['id']; data: UpdateCouponMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<UpdateCouponMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? updateCouponMutationKey()

  return useMutation<
    ResponseConfig<UpdateCouponMutationResponse>,
    ResponseErrorConfig<
      UpdateCoupon400 | UpdateCoupon401 | UpdateCoupon403 | UpdateCoupon404 | UpdateCoupon409 | UpdateCoupon417 | UpdateCoupon500 | UpdateCoupon501
    >,
    { id: UpdateCouponPathParams['id']; data: UpdateCouponMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ id, data }) => {
        return updateCoupon({ id }, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}