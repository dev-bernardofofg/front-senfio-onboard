/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../client.ts'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../client.ts'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  RegisterMutationRequest,
  RegisterMutationResponse,
  Register400,
  Register401,
  Register403,
  Register404,
  Register409,
  Register417,
  Register500,
  Register501,
} from '../models/Register.ts'
import { useMutation } from '@tanstack/react-query'
import { register } from '../register.ts'

export const registerMutationKey = () => [{ url: '/api/v1/authentication/register' }] as const

export type RegisterMutationKey = ReturnType<typeof registerMutationKey>

/**
 * @description Registra um novo usuário no sistema.
 * @summary Registrar usuário
 * {@link /api/v1/authentication/register}
 */
export function useRegister<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<RegisterMutationResponse>,
      ResponseErrorConfig<Register400 | Register401 | Register403 | Register404 | Register409 | Register417 | Register500 | Register501>,
      { data: RegisterMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<RegisterMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? registerMutationKey()

  return useMutation<
    ResponseConfig<RegisterMutationResponse>,
    ResponseErrorConfig<Register400 | Register401 | Register403 | Register404 | Register409 | Register417 | Register500 | Register501>,
    { data: RegisterMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return register(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}