/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '../../client.ts'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../client.ts'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type { MeQueryResponse, Me400, Me401, Me403, Me404, Me409, Me417, Me500, Me501 } from '../models/Me.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'
import { me } from '../me.ts'

export const meQueryKey = () => [{ url: '/api/v1/authentication/me' }] as const

export type MeQueryKey = ReturnType<typeof meQueryKey>

export function meQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = meQueryKey()
  return queryOptions<
    ResponseConfig<MeQueryResponse>,
    ResponseErrorConfig<Me400 | Me401 | Me403 | Me404 | Me409 | Me417 | Me500 | Me501>,
    ResponseConfig<MeQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return me(config)
    },
  })
}

/**
 * @description Retorna os dados do usu√°rio autenticado.
 * @summary Quem sou eu
 * {@link /api/v1/authentication/me}
 */
export function useMe<TData = ResponseConfig<MeQueryResponse>, TQueryData = ResponseConfig<MeQueryResponse>, TQueryKey extends QueryKey = MeQueryKey>(
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<MeQueryResponse>,
        ResponseErrorConfig<Me400 | Me401 | Me403 | Me404 | Me409 | Me417 | Me500 | Me501>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? meQueryKey()

  const query = useQuery(
    {
      ...meQueryOptions(config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Me400 | Me401 | Me403 | Me404 | Me409 | Me417 | Me500 | Me501>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}